@page "/rental"
@using CarRentalApp.Models
@inject CarRentalApp.Services.LocalStorageService LocalStorage
@inject CarRentalApp.Services.AuthService AuthService
@inject IJSRuntime JS

<h3>Wypożyczalnia Samochodów</h3>

@if (!AuthService.IsLoggedIn())
{
    <p>Musisz być zalogowany, aby wypożyczyć samochód!</p>
}
else
{
    @if (cars.Count == 0)
    {
        <p>Brak dostępnych samochodów.</p>
    }
    else
    {
        <ul>
            @foreach (var car in cars)
            {
                <li>
                    @car.Make @car.Model - @car.LicensePlate 
                    @(car.IsAvailable ? "(Dostępny)" : "(Wypożyczony)")
                    @if (car.IsAvailable)
                    {
                        <button @onclick="() => RentCar(car)">Wypożycz teraz</button>
                    }
                </li>
            }
        </ul>
    }
}

@code {
    private List<Car> cars = new List<Car>();

    protected override async Task OnInitializedAsync()
    {
        cars = await LocalStorage.GetItemAsync<List<Car>>("cars") ?? GetDefaultCars();
        await AuthService.LoadUserAsync();
    }

    private async Task RentCar(Car car)
    {
        if (AuthService.CurrentUser == null)
        {
            await JS.InvokeVoidAsync("alert", "Musisz być zalogowany!");
            return;
        }

        car.IsAvailable = false;
        car.ReservedByUserId = AuthService.CurrentUser.Username;

        // System rabatów
        int discount = 0;
        if (AuthService.CurrentUser.LoyaltyPoints >= 100)
        {
            discount = 20; // 20% rabatu
        }
        else if (AuthService.CurrentUser.LoyaltyPoints >= 50)
        {
            discount = 10; // 10% rabatu
        }

        // Punkty lojalnościowe
        AuthService.CurrentUser.LoyaltyPoints += 10;

        // Aktualizacja listy użytkowników
        var allUsers = await LocalStorage.GetItemAsync<List<User>>("users") ?? new List<User>();
        var currentUserIndex = allUsers.FindIndex(u => u.Username == AuthService.CurrentUser.Username);
        if (currentUserIndex >= 0)
        {
            allUsers[currentUserIndex] = AuthService.CurrentUser;
            await LocalStorage.SetItemAsync("users", allUsers);
        }

        // Aktualizacja zalogowanego użytkownika
        await LocalStorage.SetItemAsync("loggedUser", AuthService.CurrentUser);

        // Zapisanie zmodyfikowanych samochodów
        await LocalStorage.SetItemAsync("cars", cars);

        if (discount > 0)
        {
            await JS.InvokeVoidAsync("alert", $"Samochód {car.Make} {car.Model} został wypożyczony z rabatem {discount}%! (+10 punktów)");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", $"Samochód {car.Make} {car.Model} został wypożyczony! (+10 punktów)");
        }

        StateHasChanged();
    }

    private List<Car> GetDefaultCars()
    {
        return new List<Car>
        {
            new Car { Make = "Toyota", Model = "Corolla", LicensePlate = "ABC123" },
            new Car { Make = "Ford", Model = "Focus", LicensePlate = "XYZ789" },
            new Car { Make = "BMW", Model = "X5", LicensePlate = "QWE456" }
        };
    }
}
