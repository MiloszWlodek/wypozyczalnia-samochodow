@page "/register"
@using CarRentalApp.Models
@inject CarRentalApp.Services.LocalStorageService LocalStorage
@inject IJSRuntime JS

<h3>Rejestracja</h3>

<EditForm Model="newUser" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label>Nazwa użytkownika:</label><br />
        <InputText @bind-Value="newUser.Username" />
    </div>

    <div>
        <label>Email:</label><br />
        <InputText @bind-Value="newUser.Email" />
    </div>

    <div>
        <label>Hasło:</label><br />
        <InputText @bind-Value="newUser.Password" type="password" />
    </div>

    <button type="submit">Zarejestruj się</button>
</EditForm>

@code {
    private User newUser = new User();
    private List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        users = await LocalStorage.GetItemAsync<List<User>>("users") ?? new List<User>();
    }

    private async Task HandleRegister()
    {
        if (users.Any(u => u.Username == newUser.Username))
        {
            await JS.InvokeVoidAsync("alert", "Nazwa użytkownika już istnieje!");
            return;
        }

        if (!newUser.Email.Contains("@"))
        {
            await JS.InvokeVoidAsync("alert", "Nieprawidłowy adres e-mail!");
            return;
        }

        users.Add(newUser);
        await LocalStorage.SetItemAsync("users", users);
        await JS.InvokeVoidAsync("alert", "Rejestracja zakończona sukcesem!");

        newUser = new User();
    }
}
